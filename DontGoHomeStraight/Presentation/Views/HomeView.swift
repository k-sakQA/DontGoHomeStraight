import SwiftUI
import CoreLocation

struct HomeView: View {
    @ObservedObject var viewModel: AppViewModel
    @State private var destinationText = ""
    @State private var selectedTransport: TransportMode = .driving
    @State private var selectedInOut: ActivityType = .indoor
    @State private var selectedVibe: VibeType = .discovery
    @State private var useAI = false
    
    // ‰ΩèÊâÄÂÄôË£úË°®Á§∫Áî®
    @State private var showingSuggestions = false
    @State private var addressSuggestions: [Place] = []
    @State private var isSearching = false
    
    var body: some View {
        ZStack {
            LinearGradient.appBackgroundGradient
                .ignoresSafeArea()
            
            ScrollView {
                VStack(spacing: 24) {
                    // „Éò„ÉÉ„ÉÄ„Éº
                    headerSection
                    
                    // „Éï„Ç©„Éº„É†„Ç´„Éº„Éâ
                    VStack(spacing: 16) {
                        // ÁèæÂú®Âú∞„ÉªÁõÆÁöÑÂú∞„Ç´„Éº„Éâ
                        locationCard
                        
                        // Ë®≠ÂÆö„Ç´„Éº„Éâ
                        settingsCard
                    }
                    
                    // ÊèêÊ°à„Ç®„É≥„Ç∏„É≥„Ç´„Éº„Éâ
                    engineCard
                    
                    Spacer(minLength: 50)
                }
                .padding()
            }
        }
        .onAppear {
            viewModel.requestLocationPermission()
            viewModel.startLocationUpdates()
        }
    }
    
    @ViewBuilder
    private var headerSection: some View {
        HStack(spacing: 16) {
            // „É≠„Ç¥
            // ÁîªÈù¢Â∑¶‰∏ä„ÅÆ„É≠„Ç¥Ôºàblue„Çí‰ΩøÁî®„ÄÅ1.5ÂÄç = 72pt -> 108ptÔºâ
            LogoView(size: 108, appearance: .light)
                .background(
                    LinearGradient(
                        colors: [Color(hex: "3A7DFF"), Color(hex: "6AA9FF")],
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .cornerRadius(12)
                .shadow(color: .black.opacity(0.08), radius: 10, x: 0, y: 5)
            
            VStack(alignment: .leading, spacing: 4) {
                Text("„Åæ„Å£„Åô„ÅêÂ∏∞„Çä„Åü„Åè„Å™„ÅÑ")
                    .font(.system(size: 18, weight: .bold))
                    .foregroundColor(Color(hex: "212529"))
                
                Text("ÂØÑ„ÇäÈÅìÂÖà„ÇíÊé¢„Åù„ÅÜÔºÅ")
                    .font(.system(size: 14))
                    .foregroundColor(Color(hex: "6C757D"))
            }
            
            Spacer()
        }
    }
    
    @ViewBuilder
    private var locationCard: some View {
        HStack(spacing: 16) {
            VStack(spacing: 12) {
                // ÁèæÂú®Âú∞
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÁèæÂú®Âú∞")
                        .font(.system(size: 13))
                        .foregroundColor(Color(hex: "6C757D"))
                    
                    HStack {
                        TextField(
                            "‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...",
                            text: .constant(locationDisplayText)
                        )
                        .disabled(true)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                }
                
                // ÁõÆÁöÑÂú∞
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÁõÆÁöÑÂú∞")
                        .font(.system(size: 13))
                        .foregroundColor(Color(hex: "6C757D"))
                    
                    VStack(alignment: .leading, spacing: 0) {
                        TextField(
                            "",
                            text: $destinationText
                        )
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(!viewModel.isLocationAvailable)
                        .overlay(
                            Group {
                                if destinationText.isEmpty {
                                    HStack {
                                        Text("‰æãÔºâÊñ∞ÂÆøÈßÖ Ôºè ‰ΩèÊâÄ„ÇíÂÖ•Âäõ")
                                            .foregroundColor(.red)
                                        Spacer()
                                    }
                                    .padding(.horizontal, 12)
                                }
                            }
                        )
                        .onChange(of: destinationText) { newValue in
                            searchAddressSuggestions(for: newValue)
                        }
                        
                        // ÂÄôË£ú„É™„Çπ„Éà
                        if showingSuggestions && !addressSuggestions.isEmpty {
                            VStack(alignment: .leading, spacing: 0) {
                                ForEach(addressSuggestions.prefix(5), id: \.placeId) { place in
                                    Button(action: {
                                        #if DEBUG
                                        print("üî• Button tapped for place: \(place.name)")
                                        #endif
                                        selectSuggestion(place)
                                    }) {
                                        VStack(alignment: .leading, spacing: 4) {
                                            Text(place.name)
                                                .font(.system(size: 15, weight: .medium))
                                                .foregroundColor(Color(hex: "212529"))
                                            Text(place.address)
                                                .font(.system(size: 12))
                                                .foregroundColor(Color(hex: "6C757D"))
                                                .lineLimit(1)
                                        }
                                        .padding(.horizontal, 12)
                                        .padding(.vertical, 8)
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                    }
                                    .buttonStyle(PlainButtonStyle())
                                    
                                    if place.placeId != addressSuggestions.prefix(5).last?.placeId {
                                        Divider()
                                    }
                                }
                            }
                            .background(Color.white)
                            .cornerRadius(8)
                            .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
                            .zIndex(1000) // ‰ªñ„ÅÆË¶ÅÁ¥†„Çà„ÇäÂâçÈù¢„Å´Ë°®Á§∫
                        }
                    }
                }
            }
        }
        .appCard()
    }
    
    @ViewBuilder
    private var settingsCard: some View {
        VStack(spacing: 16) {
            // ÁßªÂãïÊâãÊÆµ
            VStack(alignment: .leading, spacing: 8) {
                Text("ÁßªÂãïÊâãÊÆµ")
                    .font(.system(size: 13))
                    .foregroundColor(Color(hex: "6C757D"))
                
                HStack(spacing: 10) {
                    ForEach(TransportMode.allCases, id: \.self) { mode in
                        Button(action: { selectedTransport = mode }) {
                            Text(mode.displayName)
                        }
                        .buttonStyle(ChipStyle(isSelected: selectedTransport == mode))
                    }
                }
            }
            
            // Â±ãÂÜÖ„ÉªÂ±ãÂ§ñ
            VStack(alignment: .leading, spacing: 8) {
                Text("Â±ãÂÜÖ / Â±ãÂ§ñ")
                    .font(.system(size: 13))
                    .foregroundColor(Color(hex: "6C757D"))
                
                HStack(spacing: 10) {
                    ForEach(ActivityType.allCases, id: \.self) { type in
                        Button(action: { selectedInOut = type }) {
                            Text(type.displayName)
                        }
                        .buttonStyle(ChipStyle(isSelected: selectedInOut == type))
                    }
                }
            }
            
            // Ê∞óÂàÜ
            VStack(alignment: .leading, spacing: 8) {
                Text("Ê∞óÂàÜ")
                    .font(.system(size: 13))
                    .foregroundColor(Color(hex: "6C757D"))
                
                HStack(spacing: 10) {
                    ForEach(VibeType.allCases, id: \.self) { vibe in
                        Button(action: { selectedVibe = vibe }) {
                            Text(vibe.displayName)
                        }
                        .buttonStyle(ChipStyle(isSelected: selectedVibe == vibe))
                    }
                }
            }
        }
        .frame(maxWidth: .infinity)
        .appCard()
    }
    
    @ViewBuilder
    private var engineCard: some View {
        VStack(spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text("ÊèêÊ°à„Ç®„É≥„Ç∏„É≥")
                    .font(.system(size: 13))
                    .foregroundColor(Color(hex: "6C757D"))
                
                Menu {
                    Button("Google Maps API") { useAI = false }
                    Button("AI") { useAI = true }
                } label: {
                    HStack {
                        Text(useAI ? "AI" : "Google Maps API")
                            .foregroundColor(Color(hex: "212529"))
                        Spacer()
                        Image(systemName: "chevron.down")
                            .foregroundColor(Color(hex: "6C757D"))
                    }
                    .padding(14)
                    .background(Color.white)
                    .cornerRadius(12)
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(hex: "E9EDF3"), lineWidth: 1)
                    )
                }
            }
            
            // „É°„Ç§„É≥„Éú„Çø„É≥
            Button(action: startJourney) {
                Text("ÂØÑ„ÇäÈÅì„Çí3„Å§ÊèêÊ°à„Åô„Çã")
                    .frame(maxWidth: .infinity)
            }
            .buttonStyle(BlueButtonStyle())
            .disabled(!canStartJourney)
            .opacity(canStartJourney ? 1.0 : 0.6)
        }
        .appCard()
    }
    
    private var locationDisplayText: String {
        if viewModel.isLocationAvailable {
            if viewModel.currentLocation != nil {
                return "ÁèæÂú®Âú∞ÔºàÂèñÂæóÊ∏à„ÅøÔºâ"
            }
            return "‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠..."
        } else {
            return "‰ΩçÁΩÆÊÉÖÂ†±„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì"
        }
    }
    
    private var canStartJourney: Bool {
        viewModel.isLocationAvailable && !destinationText.isEmpty
    }
    
    private func startJourney() {
        guard canStartJourney else { return }
        
        // „Åô„Åß„Å´ÁõÆÁöÑÂú∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºàÂÄôË£ú„Åã„ÇâÈÅ∏ÊäûÊ∏à„ÅøÔºâ„ÅØ„Åù„ÅÆ„Åæ„ÅæÈÄ≤„ÇÄ
        if viewModel.destination != nil {
            viewModel.setTransportMode(selectedTransport)
            viewModel.setMood(Mood(activityType: selectedInOut, vibeType: selectedVibe))
            
            if useAI {
                viewModel.navigateToGenreSelectionAI()
            } else {
                viewModel.navigateToGenreSelection()
            }
            return
        }
        
        // ÂÄôË£ú„Åã„ÇâÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅGoogle Places API„ÅßËß£Ê±∫
        Task {
            if let place = await viewModel.resolveDestination(from: destinationText) {
                let destination = Destination(
                    name: place.name,
                    coordinate: place.coordinate,
                    address: place.address
                )
                viewModel.setDestination(destination)
                viewModel.setTransportMode(selectedTransport)
                viewModel.setMood(Mood(activityType: selectedInOut, vibeType: selectedVibe))
                if useAI {
                    viewModel.navigateToGenreSelectionAI()
                } else {
                    viewModel.navigateToGenreSelection()
                }
            } else {
                viewModel.showErrorMessage("ÁõÆÁöÑÂú∞„ÅÆÂ∫ßÊ®ô„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ‰ΩèÊâÄ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            }
        }
    }
    
    private func searchAddressSuggestions(for query: String) {
        #if DEBUG
        print("üîç searchAddressSuggestions called with: \(query)")
        #endif
        
        // Á©∫ÊñáÂ≠ó„ÇÑÁü≠„Åô„Åé„ÇãÂÖ•Âäõ„ÅÆÂ†¥Âêà„ÅØÊ§úÁ¥¢„Åó„Å™„ÅÑ
        guard query.count >= 2 else {
            addressSuggestions = []
            showingSuggestions = false
            return
        }
        
        guard let currentLocation = viewModel.currentLocation else {
            #if DEBUG
            print("‚ö†Ô∏è Current location not available")
            #endif
            return
        }
        
        isSearching = true
        
        // Google Places API„Çí‰Ωø„Å£„Å¶ÂÄôË£ú„ÇíÊ§úÁ¥¢
        Task {
            #if DEBUG
            print("üîç Starting place search for: \(query)")
            #endif
            
            // Ë§áÊï∞„ÅÆÂÄôË£ú„ÇíÂèñÂæó
            let places = await viewModel.searchDestinationCandidates(from: query)
            
            await MainActor.run {
                isSearching = false
                addressSuggestions = places
                showingSuggestions = !places.isEmpty
                #if DEBUG
                print("üìç Showing suggestions: \(showingSuggestions), count: \(places.count)")
                for place in places {
                    print("  - \(place.name): \(place.address)")
                }
                #endif
            }
        }
    }
    
    private func selectSuggestion(_ place: Place) {
        #if DEBUG
        print("üéØ selectSuggestion called with: \(place.name)")
        print("   Address: \(place.address)")
        print("   Coordinate: \(place.coordinate)")
        print("   PlaceId: \(place.placeId)")
        #endif
        
        destinationText = place.name
        showingSuggestions = false
        
        // ÈÅ∏Êäû„Åï„Çå„ÅüÂ†¥ÊâÄ„ÇíÁõÆÁöÑÂú∞„Å®„Åó„Å¶Ë®≠ÂÆö„Åô„Çã„Å†„ÅëÔºà„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅØ„Åó„Å™„ÅÑÔºâ
        let destination = Destination(
            name: place.name,
            coordinate: place.coordinate,
            address: place.address
        )
        
        #if DEBUG
        print("‚úÖ Selected suggestion: \(destination.name)")
        print("üìù Setting destination in viewModel (no navigation yet)")
        #endif
        
        viewModel.setDestination(destination)
    }
    
    private func formatCoordinate(_ coordinate: CLLocationCoordinate2D) -> String {
        return String(format: "%.4f, %.4f", coordinate.latitude, coordinate.longitude)
    }
}

// MARK: - Modern Text Field Style

struct ModernTextFieldStyle: TextFieldStyle {
    func _body(configuration: TextField<Self._Label>) -> some View {
        configuration
            .padding(14)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color.white)
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(hex: "E9EDF3"), lineWidth: 1)
                    )
            )
            .font(.system(size: 16))
    }
}

// MARK: - Preview

#Preview {
    HomeView(viewModel: AppViewModel.preview)
}

// MARK: - Home View Specific Components

struct LocationPermissionGuideView: View {
    var body: some View {
        VStack(spacing: 12) {
            Image(systemName: "info.circle")
                .font(.title)
                .foregroundColor(.brandPrimary)
            
            Text("‰ΩçÁΩÆÊÉÖÂ†±„Å´„Å§„ÅÑ„Å¶")
                .font(AppFont.heading)
                .foregroundColor(.primary)
            
            Text("ÁèæÂú®Âú∞„Åã„ÇâÁõÆÁöÑÂú∞„Å∏„ÅÆÊúÄÈÅ©„Å™ÁµåÁî±Âú∞„ÇíÊèêÊ°à„Åô„Çã„Åü„ÇÅ„Å´‰ΩçÁΩÆÊÉÖÂ†±„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ")
                .font(AppFont.body)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
                .lineLimit(nil)
        }
        .padding()
        .background(Color.brandPrimary20)
        .cornerRadius(12)
    }
}

struct AppFeatureView: View {
    let icon: String
    let title: String
    let description: String
    
    var body: some View {
        HStack(spacing: 16) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(.brandPrimary)
                .frame(width: 30)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(AppFont.heading)
                    .foregroundColor(.primary)
                
                Text(description)
                    .font(AppFont.body)
                    .foregroundColor(.secondary)
                    .lineLimit(2)
            }
            
            Spacer()
        }
        .padding()
        .background(Color.brandPrimary20)
        .cornerRadius(12)
    }
}

// MARK: - Extended Home View with Features

struct ExtendedHomeView: View {
    @ObservedObject var viewModel: AppViewModel
    
    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                // „É°„Ç§„É≥„Çª„ÇØ„Ç∑„Éß„É≥
                HomeView(viewModel: viewModel)
                
                // „Ç¢„Éó„É™„ÅÆÁâπÂæ¥Á¥π‰ªã
                VStack(alignment: .leading, spacing: 16) {
                    Text("„Ç¢„Éó„É™„ÅÆÁâπÂæ¥")
                        .font(AppFont.heading)
                        .foregroundColor(.brandPrimary)
                        .padding(.horizontal)
                    
                    LazyVStack(spacing: 12) {
                        AppFeatureView(
                            icon: "brain.head.profile",
            title: "ÂØÑ„ÇäÈÅì„ÇíÊèêÊ°à„Åô„Çã",
                            description: "„ÅÇ„Å™„Åü„ÅÆÊ∞óÂàÜ„Å´Âêà„Çè„Åõ„Å¶AI„ÅåÊúÄÈÅ©„Å™ÁµåÁî±Âú∞„ÇíÊèêÊ°à"
                        )
                        
                        AppFeatureView(
                            icon: "eye.slash",
                            title: "„Çµ„Éó„É©„Ç§„Ç∫‰ΩìÈ®ì",
                            description: "Âà∞ÁùÄ„Åô„Çã„Åæ„Åß„Çπ„Éù„ÉÉ„ÉàÂêç„ÅØÁßòÂØÜÔºÅ„ÉØ„ÇØ„ÉØ„ÇØ„Çí„ÅäÂ±ä„Åë"
                        )
                        
                        AppFeatureView(
                            icon: "map",
                            title: "Google MapsÈÄ£Êê∫",
                            description: "ÊÖ£„ÇåË¶™„Åó„Çì„Å†Google Maps„Åß„Çπ„É†„Éº„Ç∫„Å´„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥"
                        )
                    }
                    .padding(.horizontal)
                }
                
                // ‰ΩçÁΩÆÊÉÖÂ†±„Ç¨„Ç§„Éâ
                LocationPermissionGuideView()
                    .padding(.horizontal)
                
                Spacer(minLength: 50)
            }
        }
    }
}

// MARK: - CLPlacemark Extension

extension CLPlacemark {
    var formattedAddress: String? {
        guard let name = name else { return nil }
        
        var components: [String] = [name]
        
        if let thoroughfare = thoroughfare {
            components.append(thoroughfare)
        }
        
        if let locality = locality {
            components.append(locality)
        }
        
        if let administrativeArea = administrativeArea {
            components.append(administrativeArea)
        }
        
        if let country = country {
            components.append(country)
        }
        
        return components.joined(separator: ", ")
    }
}
