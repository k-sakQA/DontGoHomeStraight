import SwiftUI

struct GenreSelectionView: View {
    @ObservedObject var viewModel: AppViewModel
    @State private var selectedGenre: Genre?
    
    var body: some View {
        ZStack {
            LinearGradient.appBackgroundGradient
                .ignoresSafeArea()
            
            ScrollView {
                VStack(spacing: 24) {
                    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã
                    if viewModel.isLoading {
                        loadingView
                    } else {
                        // „Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±
                        headerSection
                        
                        // ÂØÑ„ÇäÈÅì„Ç´„Éº„Éâ
                        genreCardsSection
                        
                        // „Éä„ÉìÈñãÂßã„Å´„Å§„ÅÑ„Å¶
                        navigationInfoCard
                    }
                }
                .padding()
            }
        }
        .navigationTitle("ÂØÑ„ÇäÈÅì„ÇíÈÅ∏Êäû")
        .navigationBarTitleDisplayMode(.inline)
    }
    
    @ViewBuilder
    private var loadingView: some View {
        VStack(spacing: 20) {
            Spacer()
            
            ProgressView()
                .scaleEffect(1.5)
            
            Text("AI„Åå„ÅÇ„Å™„Åü„ÅÆÊ∞óÂàÜ„Å´Âêà„Å£„Åü")
                .font(.headline)
            Text("Á¥†Êïµ„Å™ÂØÑ„ÇäÈÅìÂÖà„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„Åô...")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            if let mood = viewModel.selectedMood {
                MoodSummaryView(mood: mood)
            }
            
            Spacer()
        }
        .multilineTextAlignment(.center)
    }
    
    @ViewBuilder
    private var headerSection: some View {
        VStack(spacing: 16) {
            Text("ÂØÑ„ÇäÈÅì„ÅÆÊèêÊ°à„Åå„Åß„Åç„Åæ„Åó„ÅüÔºÅ")
                .font(.system(size: 22, weight: .bold))
                .foregroundColor(Color(hex: "212529"))
            
            Text("„Å©„ÅÆÂØÑ„ÇäÈÅì„ÇíÈÅ∏„Å≥„Åæ„Åô„ÅãÔºü")
                .font(.system(size: 14))
                .foregroundColor(Color(hex: "6C757D"))
        }
    }
    

    
    @ViewBuilder
    private var genreCardsSection: some View {
        if viewModel.recommendedGenres.isEmpty {
            emptyStateView
        } else {
            VStack(spacing: 16) {
                ForEach(Array(viewModel.recommendedGenres.prefix(3).enumerated()), id: \.element.id) { index, genre in
                    ModernGenreCard(
                        genre: genre,
                        duration: estimatedDuration(for: genre),
                        onTap: {
                            selectedGenre = genre
                            viewModel.setSelectedGenre(genre)
                            viewModel.navigateToNavigation()
                        }
                    )
                }
                // „Éç„Ç§„ÉÜ„Ç£„ÉñÂ∫ÉÂëäÔºà„Ç¢„Éó„É™UI„Å´Ê∫∂„ÅëËæº„ÇÄ„Ç´„Éº„ÉâÔºâ
                sponsoredCard
            }
        }
    }
    
    @ViewBuilder
    private var emptyStateView: some View {
        VStack(spacing: 16) {
            Image(systemName: "questionmark.circle")
                .font(.system(size: 60))
                .foregroundColor(.gray)
            
            Text("ÂÄôË£úÂú∞„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
                .font(.title3)
                .fontWeight(.medium)
            
            Text("‰ªäÊó•„ÅØ„Åæ„Å£„Åô„ÅêÂ∏∞„Çä„Åæ„Åó„Çá„ÅÜüéµ")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            Button("ÊúÄÂàù„Å´Êàª„Çã") {
                viewModel.navigateToHome()
            }
            .buttonStyle(SecondaryButtonStyle())
        }
        .padding()
    }
    
    @ViewBuilder
    private var navigationInfoCard: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("„Éä„ÉìÈñãÂßã„Å´„Å§„ÅÑ„Å¶")
                .font(.system(size: 14))
                .foregroundColor(Color(hex: "6C757D"))
            
            Text("ÈÅ∏ÊäûÂæå„ÅØ Google „Éû„ÉÉ„Éó„ÅßÁµåË∑ØÊ°àÂÜÖ„Å∏„ÄÇ„Çπ„Éù„ÉÉ„ÉàÂêç„ÅØ‰ºè„Åõ„Åü„Åæ„Åæ„ÄÅÂà∞ÁùÄ 50m ÊâãÂâç„Åß„Ç¢„Éó„É™„Å´Êàª„Å£„Å¶Á®ÆÊòé„Åã„Åó„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ")
                .font(.system(size: 14))
                .foregroundColor(Color(hex: "6C757D"))
                .lineSpacing(4)
        }
        .appCard()
    }
    
    private func estimatedDuration(for genre: Genre) -> String {
        // ÂÆüÈöõ„ÅÆË®àÁÆó„Åï„Çå„ÅüÊôÇÈñì„Çí‰ΩøÁî®„ÄÅ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÄ§
        if let minutes = genre.durationMinutes {
            return "~\(minutes)ÂàÜ"
        }
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºö„Ç∏„É£„É≥„É´„Åî„Å®„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
        switch genre.category {
        case .restaurant:
            return "~18ÂàÜ"
        case .other:
            return "~15ÂàÜ"
        }
    }
}

// MARK: - Sponsored Card

extension GenreSelectionView {
    @ViewBuilder
    var sponsoredCard: some View {
        VStack(spacing: 14) {
            HStack {
                Text("ÂØÑ„ÇäÈÅì„Çπ„Éù„É≥„Çµ„Éº")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(Color(hex: "0D1B3A"))
                Spacer()
                Text("Ad")
                    .font(.system(size: 12, weight: .bold))
                    .foregroundColor(.white)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 2)
                    .background(Color.gray.opacity(0.6))
                    .cornerRadius(6)
                    .accessibilityLabel("Â∫ÉÂëä")
            }
            .padding(.bottom, 2)
            
            // AdMob„Éù„É™„Ç∑„ÉºÊ∫ñÊã†: Âõ∫ÂÆöÈ´ò„Åï„ÅßË°®Á§∫
            NativeAdContainerView(adUnitId: Environment.adMobNativeAdUnitId)
                .frame(maxWidth: .infinity, minHeight: 180, maxHeight: 180)  // ÂπÖ„ÇíÊúÄÂ§ßÂåñ„ÄÅÈ´ò„ÅïÂõ∫ÂÆö
                .clipped()  // „ÅØ„ÅøÂá∫„ÅóÈò≤Ê≠¢
                .cornerRadius(12)
        }
        .padding(18)
        .background(
            LinearGradient(
                colors: [Color(hex: "EDF3FF"), Color(hex: "E6EEFF")],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(20)
        .shadow(color: .black.opacity(0.08), radius: 25, x: 0, y: 10)
    }
}

// MARK: - Raw Native Ad Section (no frame/background)

extension GenreSelectionView {
    @ViewBuilder
    var rawNativeAdSection: some View {
        if FeatureFlags.adsEnabled {
            #if canImport(GoogleMobileAds)
            AdMobNativeAdView(adUnitId: Environment.adMobNativeAdUnitId)
            #else
            EmptyView()
            #endif
        } else {
            EmptyView()
        }
    }
}

// MARK: - Modern Genre Card

struct ModernGenreCard: View {
    let genre: Genre
    let duration: String
    let onTap: () -> Void
    
    var body: some View {
        VStack(spacing: 14) {
            VStack(alignment: .leading, spacing: 8) {
                // ÊôÇÈñì„Éê„ÉÉ„Ç∏
                Text(duration)
                    .font(.system(size: 18, weight: .bold))
                    .foregroundColor(Color(hex: "3A7DFF"))
                    .padding(.horizontal, 12)
                    .padding(.vertical, 6)
                    .background(Color.white)
                    .overlay(
                        RoundedRectangle(cornerRadius: 999)
                            .stroke(Color(hex: "DCE7FF"), lineWidth: 1)
                    )
                    .cornerRadius(999)
                
                // „Éû„Çπ„ÇØ„Åï„Çå„ÅüÂêçÂâç
                Text("ÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºä")
                    .font(.system(size: 28, weight: .heavy))
                    .foregroundColor(Color(hex: "0D1B3A"))
                    .tracking(0.04)
                
                // „Éí„É≥„Éà
                Text("„Éí„É≥„ÉàÔºö" + (genre.hint ?? genre.description))
                    .font(.system(size: 14))
                    .foregroundColor(Color(hex: "4B5563"))
                    .lineLimit(2)
            }
            
            Button(action: onTap) {
                Text("„Åì„ÅÆÂØÑ„ÇäÈÅì„ÇíÈÅ∏„Å∂")
                    .frame(maxWidth: .infinity)
            }
            .buttonStyle(PrimaryButtonStyle())
        }
        .padding(18)
        .background(
            LinearGradient(
                colors: [Color(hex: "EDF3FF"), Color(hex: "E6EEFF")],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(20)
        .shadow(color: .black.opacity(0.08), radius: 25, x: 0, y: 10)
    }
}

// MARK: - Genre Card

struct GenreCard: View {
    let genre: Genre
    let index: Int
    let isSelected: Bool
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 16) {
                // „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÁï™Âè∑
                Text("\(index)")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                    .frame(width: 40, height: 40)
                    .background(circleColor)
                    .clipShape(Circle())
                
                // „Ç∏„É£„É≥„É´ÊÉÖÂ†±
                VStack(alignment: .leading, spacing: 6) {
                    HStack {
                        Text(genre.category.emoji)
                            .font(.title2)
                        
                        Text(genre.name)
                            .font(.headline)
                            .fontWeight(.semibold)
                            .foregroundColor(isSelected ? .appPrimary : .primary)
                        
                        Spacer()
                        
                        if isSelected {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.appPrimary)
                                .font(.title2)
                        }
                    }
                    
                    Text(genre.category.displayName)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if let hint = genre.hint, hint.isEmpty == false {
                        Text("„Éí„É≥„ÉàÔºö\(hint)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .lineLimit(2)
                    }
                    
                    Text(genre.description)
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(2)
                }
                
                Spacer()
            }
            .padding()
            .background(backgroundColor)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(borderColor, lineWidth: isSelected ? 3 : 1)
            )
            .cornerRadius(16)
            .scaleEffect(isSelected ? 1.02 : 1.0)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private var circleColor: Color {
        switch genre.category {
        case .restaurant:
            return .appAccent
        case .other:
            return .appPrimary
        }
    }
    
    private var backgroundColor: Color {
        if isSelected {
            return Color.appPrimary.opacity(0.1)
        } else {
            return Color.appSurfaceAlt
        }
    }
    
    private var borderColor: Color {
        isSelected ? .appPrimary : .gray.opacity(0.3)
    }
}

// MARK: - Mood Summary View

struct MoodSummaryView: View {
    let mood: Mood
    
    var body: some View {
        HStack(spacing: 12) {
            Text(mood.activityType.emoji)
                .font(.title3)
            Text(mood.activityType.displayName)
                .font(.subheadline)
                .fontWeight(.medium)
            
            Text("+")
                .foregroundColor(.secondary)
            
            Text(mood.vibeType.emoji)
                .font(.title3)
            Text(mood.vibeType.displayName)
                .font(.subheadline)
                .fontWeight(.medium)
        }
        .padding()
        .background(Color.appSurfaceAlt)
        .cornerRadius(8)
    }
}

// MARK: - Genre Extensions

extension Genre {
    var description: String {
        switch category {
        case .restaurant:
            return "ÁæéÂë≥„Åó„ÅÑÈ£ü‰∫ã„ÇÑÈ£≤„ÅøÁâ©„ÇíÊ•Ω„Åó„ÇÅ„ÇãÂ†¥ÊâÄ"
        case .other:
            switch name {
            case let n where n.contains("ÂÖ¨Âúí"):
                return "Ëá™ÁÑ∂Ë±ä„Åã„Åß„É™„É©„ÉÉ„ÇØ„Çπ„Åß„Åç„ÇãÂ†¥ÊâÄ"
            case let n where n.contains("ÁæéË°ìÈ§®"), let n where n.contains("ÂçöÁâ©È§®"):
                return "ÊñáÂåñÁöÑ„Å™Áô∫Ë¶ã„Å®Â≠¶„Å≥„Åå„ÅÇ„ÇãÂ†¥ÊâÄ"
            case let n where n.contains("Âõ≥Êõ∏È§®"):
                return "Èùô„Åã„ÅßÁü•ÁöÑ„Å™ÊôÇÈñì„ÇíÈÅé„Åî„Åõ„ÇãÂ†¥ÊâÄ"
            case let n where n.contains("Êõ∏Â∫ó"):
                return "Êú¨„Å®„ÅÆÂá∫‰ºö„ÅÑ„ÅåÊ•Ω„Åó„ÇÅ„ÇãÂ†¥ÊâÄ"
            case let n where n.contains("„Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞"):
                return "„ÅäË≤∑„ÅÑÁâ©„ÇÑÊï£Á≠ñ„ÅåÊ•Ω„Åó„ÇÅ„ÇãÂ†¥ÊâÄ"
            case let n where n.contains("Á•ûÁ§æ"), let n where n.contains("ÂØ∫Èô¢"):
                return "ÂøÉ„ÇíËêΩ„Å°ÁùÄ„Åë„Çã„Åì„Å®„Åå„Åß„Åç„ÇãÁ•ûËÅñ„Å™Â†¥ÊâÄ"
            case let n where n.contains("Êò†Áîª"):
                return "„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„Éà„ÇíÊ•Ω„Åó„ÇÅ„ÇãÂ†¥ÊâÄ"
            default:
                return "Êñ∞„Åó„ÅÑÁô∫Ë¶ã„ÇÑ‰ΩìÈ®ì„Åå„Åß„Åç„ÇãÂ†¥ÊâÄ"
            }
        }
    }
}

// MARK: - Enhanced Genre Card with Animation

struct EnhancedGenreCard: View {
    let genre: Genre
    let index: Int
    let isSelected: Bool
    let onTap: () -> Void
    @State private var isPressed = false
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 16) {
                // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
                ZStack {
                    Circle()
                        .fill(circleColor)
                        .frame(width: 50, height: 50)
                        .scaleEffect(isPressed ? 1.1 : 1.0)
                    
                    Text("\(index)")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                }
                
                // „Ç∏„É£„É≥„É´Ë©≥Á¥∞
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text(genre.category.emoji)
                            .font(.title2)
                        
                        Text(genre.name)
                            .font(.headline)
                            .fontWeight(.semibold)
                            .foregroundColor(isSelected ? .appPrimary : .primary)
                        
                        Spacer()
                        
                        if isSelected {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.appPrimary)
                                .font(.title2)
                                .transition(.scale.combined(with: .opacity))
                        }
                    }
                    
                    Text(genre.category.displayName)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if let hint = genre.hint, hint.isEmpty == false {
                        Text("„Éí„É≥„ÉàÔºö\(hint)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .lineLimit(2)
                    }
                    
                    Text(genre.description)
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(2)
                        .fixedSize(horizontal: false, vertical: true)
                }
                
                Spacer()
            }
            .padding()
            .background(backgroundColor)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(borderColor, lineWidth: isSelected ? 3 : 1)
            )
            .cornerRadius(16)
            .scaleEffect(isSelected ? 1.02 : (isPressed ? 0.98 : 1.0))
            .animation(.easeInOut(duration: 0.2), value: isSelected)
            .animation(.easeInOut(duration: 0.1), value: isPressed)
        }
        .buttonStyle(PlainButtonStyle())
        .onLongPressGesture(minimumDuration: 0, maximumDistance: .infinity, pressing: { pressing in
            isPressed = pressing
        }, perform: {})
    }
    
    private var circleColor: Color {
        switch genre.category {
        case .restaurant:
            return .appAccent
        case .other:
            return .appPrimary
        }
    }
    
    private var backgroundColor: Color {
        if isSelected {
            return Color.appPrimary.opacity(0.12)
        } else {
            return Color.appSurfaceAlt
        }
    }
    
    private var borderColor: Color {
        isSelected ? .appPrimary : .gray.opacity(0.3)
    }
}

// MARK: - Preview

#Preview {
    SwiftUI.NavigationView {
        GenreSelectionView(viewModel: {
            let vm = AppViewModel.preview
            vm.recommendedGenres = [
                Genre(name: "„Ç´„Éï„Çß", category: .restaurant, googleMapType: "cafe"),
                Genre(name: "ÂÖ¨Âúí", category: .other, googleMapType: "park"),
                Genre(name: "ÁæéË°ìÈ§®", category: .other, googleMapType: "museum")
            ]
            return vm
        }())
    }
}

#Preview("Loading") {
    SwiftUI.NavigationView {
        GenreSelectionView(viewModel: {
            let vm = AppViewModel.preview
            vm.isLoading = true
            vm.selectedMood = Mood(activityType: .outdoor, vibeType: .exciting)
            return vm
        }())
    }
}

#Preview("Empty State") {
    SwiftUI.NavigationView {
        GenreSelectionView(viewModel: {
            let vm = AppViewModel.preview
            vm.recommendedGenres = []
            return vm
        }())
    }
}